name: CI

on:
  push:
    branches: [ main, master, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        dependency-versions: ['latest']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          setup.py
          pyproject.toml
          requirements*.txt
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install build
    
    - name: Install dependencies
      run: |
        python -m pip install '.[dev]'
        python -m pip install pytest-cov
    
    - name: Run tests
      continue-on-error: true
      run: |
        pytest --cov=lazypredict tests/ --cov-report=xml --cov-fail-under=80
    
    - name: Upload coverage
      continue-on-error: true
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true

  docs:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: |
          setup.py
          pyproject.toml
          requirements*.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install '.[dev]'
        pip install sphinx sphinx-rtd-theme myst-parser myst-nb
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build/html
        keep_files: true
        commit_message: "docs: update documentation"

  publish:
    needs: [test, docs]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: |
          setup.py
          pyproject.toml
          requirements*.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        generate_release_notes: true
        files: dist/*
