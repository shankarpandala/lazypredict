name: Dev Pre-release

on:
  pull_request:
    branches: [ dev ]
    types: [ opened, synchronize, reopened, ready_for_review ]

jobs:
  test:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          setup.py
          pyproject.toml
          requirements*.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install '.[dev]'
    
    - name: Run tests with coverage requirements
      run: |
        pytest --cov=lazypredict tests/ --cov-report=xml --cov-fail-under=80
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true

  dependency-check:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Check dependencies
      run: |
        python -m pip install --upgrade pip safety
        pip install '.[dev]'
        safety check

  pre-release:
    needs: [test, dependency-check]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      id-token: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: dev
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: |
          setup.py
          pyproject.toml
          requirements*.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install '.[dev]'
        pip install build twine bump2version
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
    
    - name: Generate Pre-release Version
      id: version
      run: |
        # Get current version and PR info
        CURRENT_VERSION=$(grep -Po "__version__ = \"\K[^\"]*" lazypredict/__init__.py)
        PR_NUMBER=$(echo $GITHUB_REF | sed -n 's/.*\/\([0-9]*\)\/merge/\1/p')
        COMMIT_SHA=$(git rev-parse --short HEAD)
        
        # Create pre-release version with PR number and commit hash
        PRE_VERSION="${CURRENT_VERSION}-dev${PR_NUMBER}.${COMMIT_SHA}"
        echo "VERSION=${PRE_VERSION}" >> $GITHUB_ENV
        
        # Update version in files
        sed -i "s/__version__ = \".*\"/__version__ = \"${PRE_VERSION}\"/" lazypredict/__init__.py
    
    - name: Build and verify package
      run: |
        # Build package
        python -m build
        
        # Run additional verification
        pip install dist/*.whl
        python -c "import lazypredict; print(lazypredict.__version__)"
        pytest --cov=lazypredict tests/ --cov-report=term-missing
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        twine upload --skip-existing dist/* --verbose
    
    - name: Verify Test PyPI Installation
      run: |
        pip install --index-url https://test.pypi.org/simple/ lazypredict==${{ env.VERSION }}
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload --skip-existing dist/* --verbose

    - name: Create Pre-release Tag
      run: |
        git tag -a "v${{ env.VERSION }}" -m "Pre-release version v${{ env.VERSION }}"
        git push origin "v${{ env.VERSION }}"
    
    - name: Create GitHub Pre-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"
        name: "Pre-release v${{ env.VERSION }}"
        body: |
          üöß This is a pre-release version of lazypredict.
          
          Changes in this pre-release:
          - PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
          - Commit: ${{ github.sha }}
          
          ‚ö†Ô∏è This version is for testing purposes. Use with caution in production.
        prerelease: true
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}